Shoot射击游戏第一天:
1.创建6个对象类，并测试

Shoot射击游戏第二天:
1.给6个对象类创建构造方法，并测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承，并测试
3.给FlyingObject设计两个构造方法，6个对象类分别调用，并测试

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组，合为FlyingObject数组，并测试
2.在6个派生类中重写step()，并测试
3.画窗口

Shoot射击游戏第五天:
1.给类中成员添加访问控制修饰符
2.给6个派生类添加图片
  1)6个派生类添加static图片属性
  2)在FlyingObject中添加静态方法loadImage()读图片
  3)6个派生类的static块中调用loadImage()获取图片

Shoot射击游戏第六天:
1.设计窗口的宽和高为常量，适当地方做修改
2.画对象:
  步骤:1)准备图片 2)画对象行为 3)World类中重写paint()调用
  1)想画对象需要得到对象的图片，每个对象都能获取图片，
    意味着获取图片的行为为所有派生类所共有的，
	所以在超类中设计getImage()用于获取对象的图片，
	每个对象获取图片的行为都不一样，所以设计为抽象方法
    ----在FlyingObject中设计抽象方法getImage()用于获取图片
  2)获取图片时，对象需要在不同的状态下需要获取不同的图片，
    意味着对象需要设计状态(活着的、死了的、删除的)，
    因为每个对象都有状态，所以将状态设计在超类中，
	状态都是固定的，所以一般状态都设计为常量
	----在FlyingObject中设计LIFE、DEAD、REMOVE，state当前状态
    获取图片时，每个对象都需要去判断对象的状态值，
	意味着判断对象状态为派生类共有的行为，
	所以将判断状态设计在超类FlyingObject中，
	因为每个对象判断状态的行为都是一样的，所以设计为普通方法
	----在FlyingObject中设计isLife()、isDead()、isRemove()判断状态
  3)在派生类中重写getImage()获取图片:
    3.1)天空Sky，直接返回image
	3.2)子弹Bullet:
	    3.2.1)若活着呢，返回image
		3.2.2)若死了的，直接删除
	3.3)英雄机Hero:
	    3.3.1)若活着呢，返回images[0]和images[1]切换
	3.4)小敌机Airplane:
	    3.4.1)若活着的，返回images[0]
		3.4.2)若死了的，返回images[1]到images[4]，4完了删除
	3.5)大敌机BigAirplane:
	    ----同小敌机
	3.6)小蜜蜂Bee:
	    ----同小敌机
  4)前三步准备好图片了，则可以画对象了，每个对象都能画，
    画对象的行为为共有的行为，所以设计在超类中，
    因为每个对象画的行为都是一样的，所以设计为普通方法
	----在FlyingObject中设计普通方法paintObject()画对象
  5)因天空需要画两次，所以重写超类的paintObject()
    ----在Sky中重写paintObject()
  6)在World类中重写paint()实现对象

Shoot射击游戏第七天:
1.敌人入场:
  1)在World类中设计nextOne()随机生成敌人对象
  2)在World类的定时器中，调用enterAction()实现敌人入场
    在enterAction()中:
	  每400毫秒获取敌人对象，enemies扩容，装到最后一个元素上
2.子弹入场:
  1)在Hero类中设计shoot()生成子弹对象
  2)在World类的定时器中，调用shootAction()实现子弹入场
    在shootAction()中:
	  每300毫秒获取子弹对象，bullets扩容，数组追加
3.飞行物移动:
  1)在FlyingObject中设计抽象step()，派生类中重写
  2)在World类的定时器中，调用stepAction()实现飞行物移动
    在stepAction()中:
	  天空动，遍历所有敌人，敌人动，遍历所有子弹，子弹动

Shoot射击游戏第八天:
1.英雄机随着鼠标移动:
  1)在Hero中设计moveTo()实现英雄机随着鼠标动
  2)在World类的侦听器中，重写mouseMoved()鼠标移动事件
    在mouseMoved()中:
	  获取鼠标的x坐标和y坐标，调用moveTo()英雄机随着动
2.删除越界的飞行物:
  1)在FlyingObject中设计抽象方法outOfBounds()检测越界，
    在6个派生类中分别重写
  2)在World类的定时器中，调用outOfBoundsAction()删除越界，
    在outOfBoundsAction()中:
	  声明不越界敌人/子弹数组，遍历敌人/子弹数组，
	  若不越界，则将不越界敌人/子弹对象添加到不越界数组中，
	  将不越界数组复制到enemeis/bullets中
3.设计Enemy得分接口，Airplane和BigAirplane实现接口
  设计Award奖励接口，Bee实现接口

Shoot射击游戏第九天:
1.子弹与敌人的碰撞:
  1)在FlyingObject中设计hit()实现检测敌人与子弹/英雄机的碰撞
    在FlyingObject中设计goDead()实现飞行物去死
	在Hero中设计addLife()增命、addDoubleFire()增火力
	借用Airplane与BigAirplane中的getScore()玩家得分
	借用Bee中的getAwardType()获取奖励类型
  2)在World定时器中,调用bulletBangAction()实现子弹与敌人碰撞
    在bulletBangAction()中:
	  遍历子弹得子弹，遍历敌人得敌人，判断是否撞上了
	  若撞上了:
	    2.1)子弹去死、敌人去死
	    2.2)判断被撞对象的类型，若为Enemy则玩家得分
			                     若为Award则英雄机得奖励
2.画分和画命:
  1)在Hero中设计getLife()获取英雄机的命
  2)在World类的paint()中: 画分、画命

问:
1.接口的意义何在?
  ----提高复用性
2.哪个行为是多态的?哪个对象是多态的?
  ----行为多态:getScore()得分、getAwardType()得奖励
  ----被撞的敌人f:它在作为Enemy和Award时，所具备的功能是不同的
3.向上造型的意义何在?
  ----提高复用性
4.何时需要做强制类型转换?
  ----造型为超类后，若想访问超类的成员，则直接访问即可
  ----若想访问派生类所特有的成员，则必须强制类型转换
5.instanceof判断的意义何在?
  ----强转若不符合条件则发生类型转换异常，所以需先判断后强转




回顾:
1.接口:
    引用数据类型，interface定义，只能包含常量和抽象方法
	不能被实例化，是需要被实现的，实现类:必须重写所有抽象方法
    一个类可以实现多个接口，用逗号分隔，接口可以继承接口

设计规则:
1.将所有派生类所共有的属性和行为，抽到超类中----抽共性
2.所有派生类的行为都一样，设计为普通方法
  所有派生类的行为都不一样，设计为抽象方法
3.将部分派生类所共有的行为，抽到接口中
  接口对继承的单根性的扩展------------------实现多继承
  符合既是也是原则时，使用接口





笔记:
1.多态:
  1)多态的意义:
    1.1)同一类型的引用指向不同的对象时，有不同的实现
	    -----行为的多态:cut(),run(),step(),getImage()...
	1.2)同一个对象被造型为不同的类型时，有不同的功能
	    -----对象的多态:水,我,你,被击中的敌人...
  2)向上造型:自动类型转换
    2.1)超类型的引用指向派生类的对象
	2.2)能造型成为的数据类型有: 超类+所实现的接口
	2.3)能点出来什么，看引用的类型
  3)强制类型转换，成功的条件只有如下两种:
    3.1)引用所指向的对象，就是该类型
	3.2)引用所指向的对象，实现了该接口或继承了该类
  4)转换时若不符合如上两个条件则发生ClassCastException类型转换异常，
    建议:在强转之前先通过instanceof判断引用的对象是否是该类型




























int score = 0; 
public void bulletBangAction(){
  for(int i=0;i<bullets.length;i++){ 
    Bullet b = bullets[i];
    for(int j=0;j<enemies.length;j++){
	  FlyingObject f = enemies[j];
      if(f.isLife() && b.isLife() && f.hit(b)){ //撞上了
	    f.goDead();
		b.goDead();

        //Airplane(1),BigAirplane(3),BigYellowBee(5)
        if(f instanceof Enemy){---------泛指(代表所有Enemy)
		  Enemy e = (Enemy)f;
          score += e.getScore();
		}
        if(f instanceof Airplane){------特指(只能代表小敌机)
		  Airplane a = (Airplane)f;
          score += a.getScore();
		}

      

		if(f instanceof Award){
		  Award a = (Award)f;
		  int type = a.getAwardType();
          switch(type){
          case Award.DOUBLE_FIRE:
		    英雄机增火力
			break;
		  case Award.LIFE:
		    英雄机增命
			break;
		  }
		}




        


        //复用性差、扩展性差、维护性差
        if(f instanceof Airplane){
		  Airplane a = (Airplane)f;
          score += a.getScore();
		}
		if(f instanceof BigAirplane){
		  BigAirplane ba = (BigAirplane)f;
          score += ba.getScore();
		}
		if(f instanceof BigYellowBee){
		  BigYellowBee byb = (BigYellowBee)f;
          score += byb.getScore();
          int type = be.getAwardType();
          switch(type){
          case Award.DOUBLE_FIRE:
		    英雄机增火力
			break;
		  case Award.LIFE:
		    英雄机增命
			break;
		  }
		}
		if(f instanceof Bee){
		  Bee be = (Bee)f;
          int type = be.getAwardType();
          switch(type){
          case Award.DOUBLE_FIRE:
		    英雄机增火力
			break;
		  case Award.LIFE:
		    英雄机增命
			break;
		  }
		}

	  }
	}
  }
}

class BigYellowBee extends FlyingObject implements Enemy,Award{
  public int getScore(){ return 5; }
  public int getAwardType(){ return 1; }
}












若撞上了:
1.敌人去死、子弹去死---------state改为DEAD
2.若撞上的是小敌机或大敌机，则玩家得分
  若撞上的是小蜜蜂，则玩家得奖励(命、火力值)











对象只有两种状态: 活着的，删除的
对象有三种状态: 活着的，死了的(还在页面上并没有被删除呢)，删除的















1.子弹与敌人的碰撞:
  1)在FlyingObject中设计hit()实现碰撞检测
























Bullet中，明天想实现英雄机与敌人撞，还得再写一次，复用性差
-----所以将hit()写在FlyingObject敌人中
今天传递Bullet作为参数，明天需传递Hero作为参数
-----所以将参数类型设计为FlyingObject型
-----因为FlyingObject既可以接收Bullet也可以接收Hero













2.英雄机与敌人的碰撞:
















class FlyingObject{
  //敌人撞子弹
  public boolean hit(FlyingObject obj){
    this:敌人
	obj:子弹或英雄机
  }
}





















MultiTypeDemo



Aoo o = new Boo(); //向上造型
Boo o1 = (Boo)o; //符合条件1
Inter1 o2 = (Inter1)o; //符合条件2
Coo o3 = (Coo)o; //ClassCastException类型转换异常

if(o instanceof Coo){ //false
  Coo o4 = (Coo)o;
}


System.out.println(o instanceof Boo);    //true
System.out.println(o instanceof Inter1); //true
System.out.println(o instanceof Coo);    //false



interface Inter1{
}
class Aoo{
}
class Boo extends Aoo implements Inter1{
}
class Coo extends Aoo{
}
















//超类大，派生类小

FlyingObject o = new Airplane();

Airplane o = new FlyingObject(); //编译错误












我 me = new 我();
讲师       o1 = me;
孩子他妈   o2 = me;
老公的老婆 o3 = me;

o1.授课();
o2.揍他();
o3.咬他();
o3.收工资();

me.授课();
me.揍他();
me.咬他();
me.收工资();


interface 讲师{
  void 授课();
}
interface 孩子他妈{
  void 揍他();
}
interface 老公的老婆{
  void 咬他();
  void 收工资();
}
class 我 implements 讲师,孩子他妈,老公的老婆{
  public void 授课(){}
  public void 揍他(){}
  public void 咬他(){}
  public void 收工资(){}
}












动物 o1 = new 老虎();
动物 o2 = new 鱼();
动物 o3 = new 鸟();

o1.run(); //地
o2.run(); //水
o3.run(); //天

abstract class 动物{
  abstract void run();
}
class 老虎 extends 动物{
  void run(){在地上跑}
}
class 鱼 extends 动物{
  void run(){在水里游}
}
class 鸟 extends 动物{
  void run(){在天上飞}
}















人 p1 = new 理发师();
人 p2 = new 外科医师();
人 p3 = new 演员();

p1.cut(); //剪发
p2.cut(); //开刀
p3.cut(); //停止表演


abstract class 人{
  abstract void cut();
}
class 理发师 extends 人{
  void cut(){ 剪发 }
}
class 外科医师 extends 人{
  void cut(){ 开刀 }
}
class 演员 extends 人{
  void cut(){ 停止表演 }
}
















项目:
1.子弹与敌人的碰撞
2.画分和画命



interface Inter1{
}
interface Inter2{
}
interface Inter3 extends Inter1,Inter2{
}















